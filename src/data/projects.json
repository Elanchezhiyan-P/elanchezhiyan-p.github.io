[
  {
    "id": "seahorse-analytics",
    "title": "Seahorse Analytics",
    "description": "A high-performance analytics platform designed for Seahorse metabolic analyzers. Delivers real-time data visualization and interactive dashboards for biological assay insights.",
    "image": "SeahorseImage",
    "technologies": [".NET Core", "AmChart", "Canvas", "SignalR", "PostgreSQL"],
    "links": {
      "live": "https://seahorseanalytics.agilent.com"
    },
    "type": "client",
    "featured": true,
    "keyFeatures": [
      "Real-time data visualization",
      "Scalable architecture",
      "Integration with Seahorse analyzers"
    ],
    "technicalImplementation": "Developed with .NET Core for backend APIs and SignalR for live data feeds. PostgreSQL serves as the primary data store. Data visualizations are rendered using AmChart within a Canvas-powered UI for responsive performance.",
    "projectType": "Web Application"
  },
  {
    "id": "mps-finance",
    "title": "MPS Applications - Finance",
    "description": "Enterprise-grade financial module within the MPS platform enabling seamless transaction control, live reporting, and data-driven decision-making for clients.",
    "image": "MpsImage",
    "technologies": ["JavaScript", "Dotnet Core", "SQL Server", "HangFire"],
    "links": {
      "live": "https://mps.secur-serv.com/"
    },
    "type": "client",
    "featured": true,
    "keyFeatures": [
      "Real-time transaction management",
      "Comprehensive reporting",
      "Secure data handling"
    ],
    "technicalImplementation": "Engineered using .NET Core and SQL Server. HangFire manages background jobs such as batch reporting and periodic transaction summarization. Frontend logic leverages JavaScript-based dynamic charts and tables.",
    "projectType": "Web Application"
  },
  {
    "id": "query-builder",
    "title": "Query Builder",
    "description": "A Windows-based GUI application enabling users to construct and test SQL queries visually with drag-and-drop capabilities, syntax validation, and result preview.",
    "image": "QueryBuilderImage",
    "technologies": ["C#", "WinForms", "SQL Server"],
    "links": {
      "live": "#"
    },
    "type": "client",
    "featured": false,
    "keyFeatures": [
      "Drag-and-drop SQL query builder",
      "Syntax highlighting and validation",
      "Integrated test query execution"
    ],
    "technicalImplementation": "Built in C# using WinForms for a desktop interface. Employs SQL Server for query execution. Features syntax highlighting and error feedback integrated directly into the builder.",
    "projectType": "Windows Desktop Application"
  },
  {
    "id": "ics",
    "title": "ICS",
    "description": "A secure locker management system enabling remote access to lockers in hospitals and banks via mobile/web applications, with integrated PLC control.",
    "image": "IcsImage",
    "technologies": ["Dotnet Core", "C#", "PLC", "IOT", "SQL Server"],
    "links": {
      "live": "https://simtraxxwork.com/"
    },
    "type": "client",
    "featured": false,
    "keyFeatures": [
      "Remote locker control via web and mobile",
      "Secure access logging and tracking",
      "Integration with PLCs for real-time signal handling"
    ],
    "technicalImplementation": "Implemented using .NET Core and C# with IoT-based PLC communication protocols. SQL Server handles secure transaction logging. Real-time control and telemetry ensure operational reliability.",
    "projectType": "Web Application"
  },
  {
    "id": "remotecom",
    "title": "RemoteCOM",
    "description": "Real-time monitoring solution for parolees and individuals under house arrest, offering geolocation tracking and secure communication across North America.",
    "image": "ScoutImage",
    "technologies": ["React", ".NET", "Azure", "SignalR"],
    "links": {
      "live": "https://rcomscout.com/login"
    },
    "type": "client",
    "featured": true,
    "keyFeatures": [
      "Real-time monitoring of individuals",
      "Geolocation tracking",
      "Secure communication and alert system"
    ],
    "technicalImplementation": "React is used for the frontend, while backend APIs are built in .NET Core. Real-time updates and alerts are managed using SignalR. Azure provides cloud hosting, identity, and access management.",
    "projectType": "Windows Desktop Application"
  },
  {
    "id": "ios-backup-tool",
    "title": "IOS Backup Tool",
    "description": "A cross-platform desktop application for backing up iOS device data and viewing device metadata, supporting Apple protocols.",
    "image": "IOSBackupToolImage",
    "technologies": [
      "C#",
      "DotNet Core",
      "Apple Mobile Device API",
      "iOS",
      "Electron.Net"
    ],
    "links": {
      "live": "https://remote-com.com/"
    },
    "type": "client",
    "featured": false,
    "keyFeatures": [
      "Local iOS device backup",
      "Detailed device information viewer",
      "Electron-powered cross-platform UI"
    ],
    "technicalImplementation": "Developed using Electron.NET and .NET Core. Interacts with Apple Mobile Device API to access and back up data. Offers a detailed device dashboard with local storage support.",
    "projectType": "Windows Desktop Application"
  },
  {
    "id": "qliq1s",
    "title": "Qliq1s",
    "description": "A hybrid social platform combining personal social networking with business engagement features, available on both web and mobile.",
    "image": "Qliq1sImage",
    "technologies": ["Dotnet Framework", "ZegoCloud", "Firebase"],
    "links": {
      "live": "https://qliq1s.com/"
    },
    "type": "client",
    "featured": false,
    "keyFeatures": [
      "Social media features (posts, likes, comments)",
      "Business profiles and messaging",
      "Mobile and web app versions"
    ],
    "technicalImplementation": "Flutter is used for building cross-platform UI. Backend logic is powered by .NET Framework. ZegoCloud provides messaging infrastructure, and Firebase supports real-time data sync and authentication.",
    "projectType": "Web Application"
  },
  {
    "id": "expert-connect-legal",
    "title": "Expert Connect Legal",
    "description": "A legal service marketplace facilitating expert discovery, consultations, and file exchange with integrated chat and payment.",
    "image": "ExpertConnectImage",
    "technologies": ["Blob Storage", "Dotnet Core", "Azure SQL"],
    "links": {
      "live": "https://www.expertconnectlegal.com/web"
    },
    "type": "client",
    "featured": false,
    "keyFeatures": [
      "Booking system for legal services",
      "Expert-client chat feature",
      "Payment and invoice integration"
    ],
    "technicalImplementation": "Backend services developed in .NET Core, with Angular frontend integration. Azure Blob Storage manages document exchange, and Azure SQL ensures data persistence and scalability.",
    "projectType": "Web Application"
  },
  {
    "id": "kural-insights",
    "title": "Kural Insights",
    "description": "A minimalistic React web app that displays a random Thirukural verse with its English and Tamil translations every time the page is refreshed.",
    "image": "KuralInsightsImage",
    "technologies": ["React.js", "HuggingFace"],
    "links": {
      "github": "https://github.com/Elanchezhiyan-P/KuralInsights",
      "live": "https://kural-insights.netlify.app/"
    },
    "type": "personal",
    "featured": false,
    "keyFeatures": [
      "Random Thirukural display",
      "English and Tamil translation",
      "Minimal UI with refresh trigger"
    ],
    "technicalImplementation": "Uses React.js for a lightweight interface and fetches curated Thirukural content from HuggingFace datasets. Designed for speed and simplicity with clean UI and API-driven content loading.",
    "projectType": "Web Application"
  },
  {
    "id": "gitHub-user-search",
    "title": "GitHub User Search",
    "description": "A React-based GitHub user lookup tool that fetches and displays detailed profiles including repositories, followers, and bio.",
    "image": "GitHubUserSearchImage",
    "technologies": ["React.js", "Github API"],
    "links": {
      "github": "https://github.com/Elanchezhiyan-P/GitHub-User-Search"
    },
    "type": "personal",
    "featured": false,
    "keyFeatures": [
      "GitHub user profile lookup",
      "Displays repositories, followers, and more",
      "Simple search UI with error handling"
    ],
    "technicalImplementation": "Built with React.js and GitHubâ€™s REST API. Axios handles data requests, and the app includes responsive error handling for user search scenarios and API limits.",
    "projectType": "Web Application"
  },
  {
    "id": "world-country-explorer",
    "title": "World Country Explorer",
    "description": "An educational web app for exploring detailed information about countries around the world with filtering, search, and responsive display.",
    "image": "WorldCountryExplorerImage",
    "technologies": ["React.js", "MockingAPI"],
    "links": {
      "github": "https://github.com/Elanchezhiyan-P/world-country-explorer"
    },
    "type": "personal",
    "featured": false,
    "keyFeatures": [
      "List and explore countries worldwide",
      "Displays flags, populations, and more",
      "Search and filter functionality"
    ],
    "technicalImplementation": "Developed using React.js and REST Countries API. Modular components support filtering and search. Includes country flag, region, and demographic data in a mobile-friendly layout.",
    "projectType": "Web Application"
  },
  {
    "id": "tamil-song-downloader",
    "title": "Tamil Song Downloader",
    "description": "A CLI-based Python tool that scrapes Tamil song listings from online sources for downloading and offline listening.",
    "image": "TamilSongDownloaderImage",
    "technologies": ["Python", "BeautifulSoup", "Scraping"],
    "links": {
      "github": "https://github.com/Elanchezhiyan-P/tamil-song-downloader"
    },
    "type": "personal",
    "featured": false,
    "keyFeatures": [
      "Scrape Tamil songs from various sources",
      "Download songs via CLI",
      "Parse and clean HTML content"
    ],
    "technicalImplementation": "Built with Python and BeautifulSoup for HTML parsing. Supports metadata cleanup and download of audio links. Basic CLI options allow filtering and site targeting.",
    "projectType": "Web Application"
  },
  {
    "id": "blog-subscription-system",
    "title": "Blog Subscription System",
    "description": "A basic console-based blog subscription utility for managing email subscribers and dispatching blog post updates.",
    "image": "BlogSubscriptionImage",
    "technologies": ["Dotnet", "C#", "Console"],
    "links": {
      "github": "https://github.com/Elanchezhiyan-P/BlogSubscriptionSystem",
      "medium": "https://medium.com/@elanchezhiyan-p/build-a-console-blog-subscription-system-in-c-7713eb95f4a7"
    },
    "type": "personal",
    "featured": false,
    "keyFeatures": [
      "Console email subscription manager",
      "Email dispatch for new posts",
      "Simple file-based subscriber storage"
    ],
    "technicalImplementation": "Implemented as a console app in C# with basic file I/O for subscriber data. Utilizes SMTP client for email dispatching and simple command-driven interface.",
    "projectType": "Windows Desktop Application"
  },
  {
    "id": "SSOIntegrationSolution",
    "title": "SSOIntegrationSolution",
    "description": "A comprehensive .NET Core web application demonstrating two common Single Sign-On (SSO) approaches: one using an interactive login button and another enabling automatic silent authentication. This solution is compatible with major Identity Providers (IdPs), offering seamless and secure login experiences across services.",
    "image": "SSOIntegrationImage",
    "technologies": ["Dotnet Core", "C#", "Azure AD", "SSO"],
    "links": {
      "github": "https://github.com/Elanchezhiyan-P/SSOIntegrationSolution"
    },
    "type": "personal",
    "featured": false,
    "keyFeatures": [
      "SSO via Azure Active Directory",
      "Dual implementation strategy",
      "Secure user authentication flow",
      "Interactive login and silent SSO flows",
      "OAuth2 / OpenID Connect support"
    ],
    "technicalImplementation": "Developed using .NET Core and C#. The solution demonstrates two SSO approaches. The first uses a login button to redirect users to the identity provider for authentication and token exchange using OAuth2/OpenID Connect. The second automatically checks authentication status on protected routes and redirects to the IdP if needed. Authentication is configured using AddMicrosoftAccount and secure cookies. The project is designed to be IdP-agnostic with configuration driven from appsettings.json.",
    "projectType": "Web Application"
  },
  {
    "id": "Netimobiledevice",
    "title": "Netimobiledevice",
    "description": "A diagnostic utility that allows access to iOS device metadata from Windows machines using native communication protocols.",
    "image": "NetimobiledeviceImage",
    "technologies": ["Dotnet Core", "C#", "iOS", "Scraping"],
    "links": {
      "github": "https://github.com/artehe/Netimobiledevice"
    },
    "type": "opensource",
    "featured": true,
    "keyFeatures": [
      "Access iOS device data from Windows",
      "Retrieve detailed device metadata",
      "Supports scraping and device info export"
    ],
    "technicalImplementation": "Built with .NET Core and C#. Connects to iOS devices via proprietary Apple interfaces and extracts system details. Supports data scraping, export, and integration with third-party tools.",
    "projectType": "Windows Desktop Application"
  },
  {
    "id": "ArcticCodeVaultContributor",
    "title": "Arctic Code Vault Contributor",
    "description": "Contributed to open-source repositories that were archived in the GitHub Arctic Code Vault as part of GitHub's global archival initiative for preserving public repositories for future generations.",
    "image": "ArcticCodeImage",
    "technologies": [
      "GitHub",
      "Open-Source",
      "Archival Program",
      "Digital Preservation"
    ],
    "links": {
      "github": "https://github.com/Elanchezhiyan-P/HospitalManagementSystem-using-python-flask-with-fingerprint-sensor"
    },
    "type": "opensource",
    "featured": false,
    "keyFeatures": [
      "Contributed to repositories selected for the GitHub Archive Program",
      "Repositories preserved in the Arctic Code Vault for future generations",
      "Recognized for contributing quality open-source software"
    ],
    "technicalImplementation": "The repositories included were built using Python, Flask, and other open-source technologies. These contributions were selected to be part of GitHubâ€™s global initiative to preserve code long-term, ensuring its accessibility and historical value for future generations.",
    "projectType": "Documentation"
  },
  {
    "id": "HeicJpegToolkit",
    "title": "HeicJpegToolkit",
    "description": "A .NET-based utility library for converting HEIC images to JPEG and other common formats, designed for integration into existing workflows.",
    "image": "HeicJpegToolkitImage",
    "technologies": ["Dotnet framework", "C#", "dll", "console"],
    "links": {
      "github": "https://github.com/Elanchezhiyan-P/HeicJpegToolkit",
      "nuget": "https://www.nuget.org/packages/HeicJpegToolkit",
      "medium": "https://elanchezhiyan-p.medium.com/heic-to-jpg-converter-efficiently-convert-heic-images-to-jpg-using-heicjpegtoolkit-148c99c24653"
    },
    "type": "nuget",
    "featured": true,
    "keyFeatures": [
      "Convert HEIC to JPEG format",
      "Supports additional image conversions",
      "Lightweight .NET console utility"
    ],
    "technicalImplementation": "Developed as a .NET console app. Leverages Windows APIs and external DLLs to handle HEIC decoding and JPEG encoding. Optimized for performance in batch operations and desktop pipelines.",
    "projectType": "Nuget Package"
  },
  {
    "id": "telemedix",
    "title": "TeleMEDix",
    "description": "TeleMEDix is a comprehensive telemedicine platform developed using .NET Core for backend services and React for the frontend. The system enables remote consultations and efficient patient management, adhering to CCDA and HL7 FHIR standards for secure healthcare data exchange.",
    "image": "telemedixImage",
    "technologies": [
      ".NET Core",
      "React.js",
      "Azure",
      "WebHooks",
      "CosmosDB",
      "Kno2",
      "Stripe Payment gateway"
    ],
    "links": {
      "live": "https://tmx-web-bterbta3czakfpcq.z03.azurefd.net/auth"
    },
    "type": "client",
    "featured": true,
    "keyFeatures": [
      "CCDA standard for patient data exchange",
      "HL7 FHIR standard compliance",
      "Remote consultations and patient management",
      "Secure data storage and retrieval",
      "React-based frontend",
      "Persona integration for user management",
      "DICOM Viewer for medical imaging"
    ],
    "technicalImplementation": "TeleMEDix combines .NET Core for backend API services and React for the dynamic frontend interface, creating a responsive and user-friendly experience. The backend integrates CosmosDB for scalable, secure patient data storage, while Azure Blob Storage is used to manage consultation files, medical records, and images. The application follows CCDA standards for patient data exchange and integrates with Kno2 for secure data interoperability. For medical imaging, a DICOM Viewer is implemented, allowing healthcare professionals to view and interact with medical images seamlessly. Persona is used for secure user management and authentication, ensuring robust user access control across the platform. This entire solution is hosted on Azure App Service, providing scalability and reliability.",
    "projectType": "Web API Application"
  },
  {
    "id": "invoice-pilot",
    "title": "InvoicePilot",
    "description": "InvoicePilot is a versatile invoicing and expense management application designed to streamline financial operations for small businesses. It offers features such as invoice generation, expense tracking, and financial reporting, all within a user-friendly interface.",
    "image": "telemedixImage",
    "technologies": [
      "Nest.JS",
      "Invoice PDF generation",
      "Multi-Tenant Architecture",
      "Swagger"
    ],
    "links": {
      "github": "https://github.com/elanchezhiyan-P/invoice-pilot",
      "medium": "https://elanchezhiyan-p.medium.com/from-zero-to-invoicepilot-my-first-nestjs-app-with-pdf-generation-email-delivery-984df1b34409"
    },
    "type": "personal",
    "featured": false,
    "keyFeatures": [
      "CCDA standard for patient data exchange",
      "HL7 FHIR standard compliance",
      "Remote consultations and patient management",
      "Secure data storage and retrieval",
      "React-based frontend",
      "Persona integration for user management",
      "DICOM Viewer for medical imaging"
    ],
    "technicalImplementation": "TeleMEDix combines .NET Core for backend API services and React for the dynamic frontend interface, creating a responsive and user-friendly experience. The backend integrates CosmosDB for scalable, secure patient data storage, while Azure Blob Storage is used to manage consultation files, medical records, and images. The application follows CCDA standards for patient data exchange and integrates with Kno2 for secure data interoperability. For medical imaging, a DICOM Viewer is implemented, allowing healthcare professionals to view and interact with medical images seamlessly. Persona is used for secure user management and authentication, ensuring robust user access control across the platform. This entire solution is hosted on Azure App Service, providing scalability and reliability.",
    "projectType": "Web API Application"
  },
  {
    "id": "ghl",
    "title": "GoHighLevel",
    "description": "GoHighLevel is a comprehensive CRM and marketing automation platform designed for agencies and small businesses. It provides tools for lead generation, customer relationship management, and marketing campaigns, all within a single interface.",
    "image": "GoHighLevelImage",
    "technologies": [
      ".NET Core",
      "Next.JS",
      "Azure",
      "Blob Storage",
      "SQL Server"
    ],
    "links": {
      "live": "https://formsync-test.azurewebsites.net/syncstatus"
    },
    "type": "client",
    "featured": false,
    "keyFeatures": [
      "Integration with FreshSales for CRM",
      "Integration with GHL",
      "Lead generation and management",
      "Azure App services with SQL server",
      "Blob Storage for file management"
    ],
    "technicalImplementation": "Createad a Web API using .NET Core to handle backend operations, including user authentication, data management, and integration with external services. The frontend is built with Next.js, providing a responsive and interactive for the form submission",
    "projectType": "Web API Application"
  }
]
